#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(viewParams)

//final scenecolor
Texture2D sceneColor;

//sampler for final scenecolor
SamplerState sceneColorSampler;

//boundingbox stencil buffer
Texture2D<uint2> customStencil;

//how many boundingboxes we have
int boundingBoxCount;

//write buffer for boundingBoxes
RWStructuredBuffer<float4> boundingBoxDataBuffer;

uint4 MakeBoundingBoxes(int stencilID)
{
    uint width, height, numLevel;
    customStencil.GetDimensions(0, width, height, numLevel);
    
    uint4 boundingBox = uint4(width, height, 0, 0);
    
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            if (customStencil.Load(uint3(x, y, 0))
                STENCIL_COMPONENT_SWIZZLE == stencilID) 
            {
                if (x < boundingBox.x)
                {
                    boundingBox.x = x;
                }
                if (y < boundingBox.y)
                {
                    boundingBox.y = y;
                }
                if (x > boundingBox.z)
                {
                    boundingBox.z = x;
                }
                if (y > boundingBox.w)
                {
                    boundingBox.w = y;
                }
            }
        }
    }
    
    return boundingBox;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, 1)]
void BoundingBoxCS(uint3 dispatchThreadId : SV_DispatchThreadID,
                    uint3 groupThreadId : SV_GroupThreadID)
{
    for (int i = 0; i < boundingBoxCount; i++)
    {
        boundingBoxDataBuffer[i] = MakeBoundingBoxes(i + 1);
    }
}


float2 PosToUV(float2 _pos)
{
    float2 viewportUV = ((_pos - viewParams_ViewportMin.xy) * viewParams_ViewportSizeInverse.xy);
    return viewportUV * viewParams_UVViewportSize + viewParams_UVViewportMin;
}

float DistanceToLine(float2 _target, float2 _pointA, float2 _pointB)
{
    float2 lineAB = _pointB - _pointA;
    float lenAB = length(lineAB);
    float2 lineABNormalized = normalize(lineAB);
    
    float2 v = _target - _pointA;
    float d = dot(v, lineABNormalized);
    d = clamp(d, 0, lenAB);
    
    return distance(_pointA + lineABNormalized * d, _target);
}

bool IsBoundingPixel(float _distance, float2 _pos)
{
    for (int i = 0; i < boundingBoxCount; i++)
    {
        if (DistanceToLine(_pos, float2(boundingBoxDataBuffer[i].x, boundingBoxDataBuffer[i].y), float2(boundingBoxDataBuffer[i].z, boundingBoxDataBuffer[i].y)) < _distance ||
            DistanceToLine(_pos, float2(boundingBoxDataBuffer[i].z, boundingBoxDataBuffer[i].y), float2(boundingBoxDataBuffer[i].z, boundingBoxDataBuffer[i].w)) < _distance ||
            DistanceToLine(_pos, float2(boundingBoxDataBuffer[i].z, boundingBoxDataBuffer[i].w), float2(boundingBoxDataBuffer[i].x, boundingBoxDataBuffer[i].w)) < _distance ||
            DistanceToLine(_pos, float2(boundingBoxDataBuffer[i].x, boundingBoxDataBuffer[i].w), float2(boundingBoxDataBuffer[i].x, boundingBoxDataBuffer[i].y)) < _distance)
        {
            return true;
        }
    }
    return false;
}

void BoundingBoxPS(in float4 InPosition : SV_Position,
                    out float4 OutColor : SV_Target0)
{
    float4 color = float4(Texture2DSample(sceneColor, sceneColorSampler, PosToUV(InPosition.xy)));
    
    if (IsBoundingPixel(2, InPosition.xy))
    {
        color = float4(0, 1, 0, 0);
    }
    
    OutColor = color;
}